# -*- coding: utf-8 -*-
"""final_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzjrkbzfFGJeapkZmOb2Y2UVu85VAqOZ

# **Paris 2024 EDA**
"""



"""## Importing required libraries for analysis"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
import plotly
import plotly.express as px
import plotly.graph_objs as go

from datetime import datetime

import warnings
warnings.filterwarnings("ignore")

print(pd.__version__)
print(np.__version__)
# print(plt.__version__)
print(sns.__version__)
print(matplotlib.__version__)
print(plotly.__version__)
# print(go.__version__)

"""## EDA

### EDA on athletes.csv

#### Based on age and gender
"""

athlete_df = pd.read_csv("/content/drive/MyDrive/archive/athletes.csv")
athlete_df.head()

athlete_df.columns

athlete_df.info()

# data cleaning
# Drop rows with NaN values in height or weight
athlete_df = athlete_df.dropna(subset=['height', 'weight'])

# Define the Olympic ring colors
olympic_colors = ['#0085C7', '#F4C300', '#000000', '#009F3D', '#DF0024']  # Blue, Yellow, Black, Green, Red

# Set up the figure and axes
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

# Histogram for height
sns.histplot(athlete_df['height'], bins=30, kde=False, ax=axs[0, 0], color=olympic_colors[0])
axs[0, 0].set_title('Height Distribution')
axs[0, 0].set_xlabel('Height (cm)')
axs[0, 0].set_ylabel('Frequency')

# KDE plot for height
sns.kdeplot(athlete_df['height'], ax=axs[0, 1], color=olympic_colors[1])
axs[0, 1].set_title('Height KDE Plot')
axs[0, 1].set_xlabel('Height (cm)')
axs[0, 1].set_ylabel('Density')

# Histogram for weight
sns.histplot(athlete_df['weight'], bins=30, kde=False, ax=axs[1, 0], color=olympic_colors[2])
axs[1, 0].set_title('Weight Distribution')
axs[1, 0].set_xlabel('Weight (kg)')
axs[1, 0].set_ylabel('Frequency')

# KDE plot for weight
sns.kdeplot(athlete_df['weight'], ax=axs[1, 1], color=olympic_colors[3])
axs[1, 1].set_title('Weight KDE Plot')
axs[1, 1].set_xlabel('Weight (kg)')
axs[1, 1].set_ylabel('Density')

# Adjust layout
plt.tight_layout()
plt.show()

# Scatter plot for height vs. weight
plt.figure(figsize=(10, 6))
sns.scatterplot(data=athlete_df, x='height', y='weight', alpha=0.6, color=olympic_colors[4])
plt.title('Height vs. Weight')
plt.xlabel('Height (cm)')
plt.ylabel('Weight (kg)')
plt.show()

"""Insight: *There are many zero values in the columns height and weight*"""

# prompt: total number of zero and non zero values in the columns height and weight

# Count zero and non-zero values for height and weight
height_zero_count = (athlete_df['height'] == 0).sum()
height_non_zero_count = (athlete_df['height'] != 0).sum()
weight_zero_count = (athlete_df['weight'] == 0).sum()
weight_non_zero_count = (athlete_df['weight'] != 0).sum()

print(f"Height: Zero values - {height_zero_count}, Non-zero values - {height_non_zero_count}")
print(f"Weight: Zero values - {weight_zero_count}, Non-zero values - {weight_non_zero_count}")

# prompt: remove all the 0 values from both height and weight columns and plot the same graph as above

import matplotlib.pyplot as plt
# Remove rows with height or weight equal to 0
athlete_df_cleaned = athlete_df[(athlete_df['height'] != 0) & (athlete_df['weight'] != 0)]

# Set up the figure and axes
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

# Histogram for height
sns.histplot(athlete_df_cleaned['height'], bins=30, kde=False, ax=axs[0, 0], color=olympic_colors[0])
axs[0, 0].set_title('Height Distribution')
axs[0, 0].set_xlabel('Height (cm)')
axs[0, 0].set_ylabel('Frequency')

# KDE plot for height
sns.kdeplot(athlete_df_cleaned['height'], ax=axs[0, 1], color=olympic_colors[1])
axs[0, 1].set_title('Height KDE Plot')
axs[0, 1].set_xlabel('Height (cm)')
axs[0, 1].set_ylabel('Density')

# Histogram for weight
sns.histplot(athlete_df_cleaned['weight'], bins=30, kde=False, ax=axs[1, 0], color=olympic_colors[2])
axs[1, 0].set_title('Weight Distribution')
axs[1, 0].set_xlabel('Weight (kg)')
axs[1, 0].set_ylabel('Frequency')

# KDE plot for weight
sns.kdeplot(athlete_df_cleaned['weight'], ax=axs[1, 1], color=olympic_colors[3])
axs[1, 1].set_title('Weight KDE Plot')
axs[1, 1].set_xlabel('Weight (kg)')
axs[1, 1].set_ylabel('Density')

# Adjust layout
plt.tight_layout()
plt.show()

# Scatter plot for height vs. weight
plt.figure(figsize=(10, 6))
sns.scatterplot(data=athlete_df_cleaned, x='height', y='weight', alpha=0.6, color=olympic_colors[4])
plt.title('Height vs. Weight')
plt.xlabel('Height (cm)')
plt.ylabel('Weight (kg)')
plt.show()

# Calculate the mean height and weight
mean_height = athlete_df_cleaned['height'].mean()
mean_weight = athlete_df_cleaned['weight'].mean()

print(f"Mean Height: {mean_height:.2f} cm")
print(f"Mean Weight: {mean_weight:.2f} kg")

"""Insight:

1) The Athletes height who participated in the Paris Olympics 2024 ranges from 150 - 200 cms, the mean height 175.25 cms.

2) The weight ranges from 50 - 120 kgs, the mean weight 77.75 kgs
"""

athlete_df['birth_date'].head()

# Convert birth_date to datetime format
athlete_df['birth_date'] = pd.to_datetime(athlete_df['birth_date'])

athlete_df['birth_date'].head()

# Calculate age of each athlete
def calculate_age(birth_date):
    today = datetime.today()
    age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
    return age

athlete_df['age'] = athlete_df['birth_date'].apply(calculate_age)

# Plot the age distribution
plt.figure(figsize=(10, 6))
sns.histplot(athlete_df['age'], bins=10, kde=False, color='#0085C7')  # Using one of the Olympic colors
plt.title('Age Distribution of Athletes')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Group data by age and gender and calculate the count
age_gender_counts = athlete_df.groupby(['age', 'gender'])['name'].count().unstack()

# Create a bar plot with side-by-side bars
ax = age_gender_counts.plot(kind='bar', figsize=(12, 6), width=0.8)

# Add total count on top of each bar
for p in ax.patches:
  ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2., p.get_height()),
              ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.title('Age Distribution of Athletes by Gender')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.xticks(rotation=0)
plt.legend(['Female', 'Male'])
plt.tight_layout()
plt.show()

# Group data by age and gender and calculate the count
age_gender_counts = athlete_df.groupby(['age', 'gender'])['name'].count().unstack()

# Create a line plot with smoothed curves and filled areas
plt.figure(figsize=(12, 6))

# Plot male curve
plt.plot(age_gender_counts.index, age_gender_counts['Male'], label='Male', color='blue')
plt.fill_between(age_gender_counts.index, age_gender_counts['Male'], color='lightblue', alpha=0.3)

# Plot female curve
plt.plot(age_gender_counts.index, age_gender_counts['Female'], label='Female', color='red')
plt.fill_between(age_gender_counts.index, age_gender_counts['Female'], color='lightcoral', alpha=0.3)

plt.title('Age Distribution of Athletes by Gender')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()
plt.grid(True)
plt.show()

# prompt: find mean age of male and female

# Group by gender and calculate the mean age
mean_age_by_gender = athlete_df.groupby('gender')['age'].mean()

print(mean_age_by_gender)

"""Insight: The graph is the age distribution of male and female athletes is different. Male athletes have a peak around mid-20s, while female athletes have a peak in their early 20s. This could be because of the physical demands of different sports or societal expectations and opportunities for male and female athletes.

#### Based on Country and gender
"""

# Count the number of athletes from each country
country_counts = athlete_df['country'].value_counts()
country_counts

country_unique = athlete_df['country'].unique()
country_unique

country_unique.size

"""Insight: *In total 206 countries have participated in Paris Olympics 2024*"""

# Select the top 10 countries based on athlete count
top_10_countries = country_counts.nlargest(10)
top_10_countries

# Create a bar plot for all countries
plt.figure(figsize=(20, 6))
sns.barplot(x=country_counts.index, y=country_counts.values, palette='viridis')
plt.title('Number of Athletes per Country')
plt.xlabel('Country')
plt.ylabel('Number of Athletes')
plt.xticks(rotation=90, ha='right')
plt.tight_layout()
plt.show()

# Group data by country and count the number of athletes
country_athlete_counts = athlete_df.groupby('country')['name'].count().reset_index()

# Create a choropleth map
fig = px.choropleth(country_athlete_counts, locations="country", locationmode='country names',
                    color="name", hover_name="country",
                    title="Number of Athletes per Country",
                    color_continuous_scale=px.colors.sequential.Plasma)

fig.show()

# Plot the bar chart for number of athletes by top 10 countries
plt.figure(figsize=(12, 8), facecolor='#f6f5f5')

# Create the bar plot with the Olympic color palette
ax = sns.barplot(x=top_10_countries.index, y=top_10_countries.values, palette=olympic_colors)

# Customize the plot
ax.set_xlabel('Country', fontsize=12, weight='bold')
ax.set_ylabel('Number of Athletes', fontsize=12, weight='bold')
ax.set_title('Top 10 Countries by Number of Athletes', fontsize=14, weight='bold')

ax.grid(which='major', axis='y', color='#EEEEEE', linewidth=0.4)

# Add the value labels
for p in ax.patches:
    value = f'{p.get_height():.0f}'
    x = p.get_x() + p.get_width() / 2
    y = p.get_height()
    ax.text(x, y, value, ha='center', va='bottom', fontsize=10)

plt.xticks(rotation=45)
plt.show()

"""Insights:

1)*The graph shows the number of athletes who participated in each country [USA, France, Australia, Germany, Japan], and these countries have given more participants to the Olympics.*

2) *The choropleth map gives a detailed visiualization of participation of the enter globe.*

3) *15 Russian athletes competed in the 2024 Paris Olympics as "Individual Neutral Athletes" (AINs). The International Olympic Committee (IOC) allowed some Russian athletes to compete under neutral conditions, but not all, due to Russia's invasion of Ukraine in February 2022.*

4) *USA, France, Australia, Germany, and Japan have higher Olympic participation due to large populations, strong sports cultures, economic resources, government support, historical success, and well-organized sports governing bodies.*
"""

gender = athlete_df['gender']

gender_counts = gender.value_counts()

# Plot the vertical bar chart
plt.figure(figsize=(6, 4), facecolor='#f6f5f5')
bars = plt.bar(gender_counts.index, gender_counts.values, color=['blue', 'red']) # Changed color to blue and red

# Add labels and title
plt.xlabel('Gender', fontsize=10, weight='bold')
plt.ylabel('Count', fontsize=10, weight='bold')

# Add count on top of each bar
for bar in bars:
  plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(), bar.get_height(), ha='center', va='bottom')

plt.show()

# Calculate the ratio of male to female participation
male_count = athlete_df['gender'].value_counts().get('Male', 0)
female_count = athlete_df['gender'].value_counts().get('Female', 0)

if female_count != 0:
  ratio = male_count / female_count
  print(f"The ratio of male to female participation is: {ratio:.2f}")
else:
  print("There are no female participants in the data.")

"""Insight: *This year the Olympics had 1.04:1 Male to Female ratio.*"""

# Filter the DataFrame for female athletes
female_athletes = athlete_df[athlete_df['gender'] == 'Female']

# Group by country and count the number of female athletes
country_female_counts = female_athletes['country'].value_counts()

# Select the top 10 countries with the highest female athlete participation
top_10_female_countries = country_female_counts.nlargest(10)

# Create the bar plot
plt.figure(figsize=(12, 8), facecolor='#f6f5f5')
ax = sns.barplot(x=top_10_female_countries.index, y=top_10_female_countries.values, palette=olympic_colors)

# Customize the plot
ax.set_xlabel('Country', fontsize=12, weight='bold')
ax.set_ylabel('Number of Female Athletes', fontsize=12, weight='bold')
ax.set_title('Top 10 Countries by Number of Female Athletes', fontsize=14, weight='bold')
ax.grid(which='major', axis='y', color='#EEEEEE', linewidth=0.4)

# Add the value labels
for p in ax.patches:
    value = f'{p.get_height():.0f}'
    x = p.get_x() + p.get_width() / 2
    y = p.get_height()
    ax.text(x, y, value, ha='center', va='bottom', fontsize=10)

plt.xticks(rotation=45)
plt.show()

# Group data by country and count the number of athletes
country_athlete_counts = female_athletes.groupby('country')['name'].count().reset_index()

# Create a choropleth map
fig = px.choropleth(country_athlete_counts, locations="country", locationmode='country names',
                    color="name", hover_name="country",
                    title="Number of Female Athletes per Country",
                    color_continuous_scale=px.colors.sequential.Plasma)

fig.show()

"""The graph shows the top 10 countries by the number of female athletes participating in the 2024 Olympics.

Insights:

*The graph shows the top 10 countries with the most female athletes in the 2024 Olympics. The United States leads with 328 participants, followed by France and Australia. This indicates a growing trend of female participation in the Olympics.*

### EDA on medals.csv
"""

medals = pd.read_csv("/content/drive/MyDrive/archive/medals.csv")
medals.head()

medals.columns

medals.columns.size

medal_counts = medals.groupby(['country', 'medal_type'])['medal_type'].count().unstack().fillna(0)

# Sort the medal counts in descending order by total medals
medal_counts['Total'] = medal_counts.sum(axis=1)
medal_counts = medal_counts.sort_values('Total', ascending=False)

# Create a bar plot of medal counts for each country
ax = medal_counts.plot(kind='bar', figsize=(15, 8))

# Add labels and title
plt.title('Medal Counts by Country')
plt.xlabel('Country')
plt.ylabel('Number of Medals')
plt.xticks(rotation=90)
plt.legend(title='Medal Type')

plt.tight_layout()
plt.show()

# Select the top 10 countries based on total medal count
top_10_medal_countries = medal_counts.nlargest(10, 'Total')

# Create a bar plot of medal counts for the top 10 countries
ax = top_10_medal_countries.plot(kind='bar', figsize=(15, 8))

# Add labels and title
plt.title('Medal Counts by Top 10 Countries')
plt.xlabel('Country')
plt.ylabel('Number of Medals')
plt.xticks(rotation=90)
plt.legend(title='Medal Type')

plt.tight_layout()
plt.show()

"""Insight:

*The United States leads with the highest total number of medals, followed by China and Great Britain. However, China boasts the most gold medals, while the United States has the most silver and bronze medals. The remaining countries in the top 10 include Australia, France, Japan, Italy, the Netherlands, Germany, and Korea.*
"""



import numpy as np
import pandas as pd

# prompt: I want to read all the csv files in the archive 1 folder that is in my drive that is already mounted to the notebook

import os

folder_path = '/content/drive/MyDrive/archive'

all_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]

df_list = []
for filename in all_files:
  file_path = os.path.join(folder_path, filename)
  try:
    df = pd.read_csv(file_path)
    df_list.append(df)
  except Exception as e:
    print(f"Error reading {filename}: {e}")

# Now df_list contains a list of DataFrames, one for each CSV file.
# You can concatenate them or process them individually as needed.

from google.colab import drive
drive.mount('/content/drive')

df_list

from collections import defaultdict

column_similarity = defaultdict(list)

for i, df in enumerate(df_list):
  for col in df.columns:
    column_similarity[col].append(i)

common_columns = [col for col, df_indices in column_similarity.items() if len(df_indices) > 1]

print("Common columns across multiple DataFrames:", common_columns)

for col in common_columns:
  print(f"\nDataFrame indices with column '{col}': {column_similarity[col]}")

df = pd.read_csv('/content/medals.csv')

df.head()

df.info()

df.isnull().sum()

df = df.drop(columns=['url_event','medal_date','code', 'country_code','country'])

df.head()

# prompt: Now generate insight interactive plots from the above dataframe

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots


fig = px.histogram(df, x='discipline', color='gender', barmode='group', title='Medal Distribution by Country and Gender')
fig.show()


# 2. Medal Type Distribution (Interactive Pie Chart)
fig = px.pie(df, names='medal_type', title='Medal Type Distribution')
fig.show()

# 3. Gender Distribution in Medal Winners (Interactive Bar Chart)
fig = px.histogram(df, x='gender', title='Gender Distribution in Medal Winners')
fig.show()

# 4. Medal Count by Discipline (Interactive Bar Chart)
fig = px.histogram(df, x='discipline', color='medal_type', barmode='group', title='Medal Count by Discipline and Medal Type')
fig.show()

# 6. Medal Count by Country and Medal Type (Interactive Heatmap)
medal_by_country_and_type = df.groupby(['discipline', 'medal_type'])['medal_type'].count().unstack().fillna(0)
fig = go.Figure(data=go.Heatmap(
                   z=medal_by_country_and_type.values,
                   x=medal_by_country_and_type.columns,
                   y=medal_by_country_and_type.index,
                   colorscale='Viridis'))
fig.update_layout(title='Medal Count by Gender')
fig.show()


# 8. Interactive Subplots for Comparison
fig = make_subplots(rows=2, cols=2, subplot_titles=("Medal Count by Discipline", "Medal Distribution by Gender", "Medal Type Distribution"),
                    specs=[[{"type": "xy"}, {"type": "xy"}],
                           [{"type": "domain"}, {"type": "xy"}]]) # Specify 'domain' type for the pie chart subplot
fig.add_trace(go.Histogram(x=df['discipline'], name="Discipline Histogram"), row=1, col=1)
fig.add_trace(go.Histogram(x=df['gender'], name="Gender Histogram"), row=1, col=2)
fig.add_trace(go.Pie(labels=df['medal_type'].value_counts().index, values=df['medal_type'].value_counts().values), row=2, col=1)
fig.update_layout(height=800, width=800, title_text="Interactive Subplots")
fig.show()

# prompt: Give me  a interactive graph for top 10 country_long with more medal count

# Assuming 'df' is your DataFrame with the 'country_long' and 'medal_type' columns

# Group by 'country_long' and count the number of medals
medal_counts_by_country = df.groupby('country_long')['medal_type'].count().reset_index()

# Sort by medal count in descending order and get the top 10
top_10_countries = medal_counts_by_country.sort_values('medal_type', ascending=False).head(10)

# Create an interactive bar chart using Plotly
fig = px.bar(top_10_countries, x='country_long', y='medal_type',
             title='Top 10 Countries with the Most Medals',
             labels={'country_long': 'Country', 'medal_type': 'Number of Medals'})

# Customize the layout (optional)
fig.update_layout(xaxis_tickangle=-45)

# Show the interactive chart
fig.show()

# prompt: Modify the above graph as stacked bar graph for gender as legend

# Assuming 'df' is your DataFrame with the 'country_long', 'medal_type', and 'gender' columns

# Group by 'country_long' and 'gender', then count the number of medals
medal_counts_by_country_gender = df.groupby(['country_long', 'gender'])['medal_type'].count().reset_index()

# Sort by medal count in descending order and get the top 10 countries
top_10_countries = medal_counts_by_country_gender.groupby('country_long')['medal_type'].sum().sort_values(ascending=False).head(10).index

# Filter the data for the top 10 countries
medal_counts_by_country_gender = medal_counts_by_country_gender[medal_counts_by_country_gender['country_long'].isin(top_10_countries)]

# Create a stacked bar chart using Plotly
fig = px.bar(medal_counts_by_country_gender, x='country_long', y='medal_type', color='gender',
             title='Top 10 Countries with the Most Medals (Stacked by Gender)',
             labels={'country_long': 'Country', 'medal_type': 'Number of Medals'},
             barmode='stack')

# Customize the layout (optional)
fig.update_layout(xaxis_tickangle=-45)

# Show the interactive chart
fig.show()

